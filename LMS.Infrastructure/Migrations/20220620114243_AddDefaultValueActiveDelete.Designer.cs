// <auto-generated />
using System;
using LMS.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LMS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220620114243_AddDefaultValueActiveDelete")]
    partial class AddDefaultValueActiveDelete
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("LMS.Data.Entity.Course", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("NumberOfTrainee")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_trainee");

                    b.Property<string>("ParentCode")
                        .HasColumnType("text")
                        .HasColumnName("parent_code");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_course");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_course_subject_id");

                    b.ToTable("course");
                });

            modelBuilder.Entity("LMS.Data.Entity.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("text")
                        .HasColumnName("department_code");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("text")
                        .HasColumnName("department_name");

                    b.HasKey("Id")
                        .HasName("pk_department");

                    b.ToTable("department");
                });

            modelBuilder.Entity("LMS.Data.Entity.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.HasKey("Id")
                        .HasName("pk_option");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_option_question_id");

                    b.ToTable("option");
                });

            modelBuilder.Entity("LMS.Data.Entity.OtherLearningResources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("create_by");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("PathToFile")
                        .HasColumnType("text")
                        .HasColumnName("path_to_file");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_other_learning_resources");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_other_learning_resources_subject_id");

                    b.ToTable("other_learning_resources");
                });

            modelBuilder.Entity("LMS.Data.Entity.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permission");

                    b.ToTable("permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "BasePermission",
                            Code = "PerformBaseFeatures",
                            Description = "Perform basic features such as logout, edit avatar",
                            Name = "Base Features"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Dashboard",
                            Code = "ViewDashboard",
                            Description = "View a summary of information on one display",
                            Name = "View overview of general information"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Course",
                            Code = "ViewAssignedCoursesList",
                            Description = "View assigned courses",
                            Name = "View list of assigned courses"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Course",
                            Code = "ViewAllCourses",
                            Description = "View all of courses in system",
                            Name = "View all of courses"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Course",
                            Code = "ViewDetailOfCourse",
                            Description = "View detail of course include description, outline, topics",
                            Name = "View detail of course"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Course",
                            Code = "CreateTopic",
                            Description = "Create topic in course",
                            Name = "Create topic"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Course",
                            Code = "UpdateTopic",
                            Description = "Update topic in course",
                            Name = "Update topic"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Course",
                            Code = "DeleteTopic",
                            Description = "Delete topic in course",
                            Name = "Delete topic"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Course",
                            Code = "AddLearningResource",
                            Description = "Add a new learning resource in topic",
                            Name = "Add a new learning resource"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Course",
                            Code = "DeleteLearningResource",
                            Description = "Delete the learning resource in topic",
                            Name = "Delete the learning resource"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Course",
                            Code = "ViewContentOfLearningResources",
                            Description = "View content of learning resource",
                            Name = "View content of learning resource"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Course",
                            Code = "ViewAttendeesList",
                            Description = "View list attendees in course",
                            Name = "View list attendees in course"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Course",
                            Code = "ViewSummaryOfQuizResults",
                            Description = "View summary of quiz results of students",
                            Name = "View summary of quiz results"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Course",
                            Code = "ViewDetailOfQuizResultOfStudent",
                            Description = "View detail of student’s quiz result",
                            Name = "View detail of student’s quiz result"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Course",
                            Code = "ViewSummaryOfSurveyResults",
                            Description = "View summary of survey results of students",
                            Name = "View summary of survey results"
                        },
                        new
                        {
                            Id = 16,
                            Category = "Course",
                            Code = "ViewSummaryOfLearningProcessOfStudent",
                            Description = "View summary of student’s learning process",
                            Name = "View summary of student’s learning process"
                        },
                        new
                        {
                            Id = 17,
                            Category = "Course",
                            Code = "ViewDetailOfLearningProcessOfStudent",
                            Description = "View detail of student’s learning process",
                            Name = "View detail of student’s learning process"
                        },
                        new
                        {
                            Id = 18,
                            Category = "Course",
                            Code = "CreateQuiz",
                            Description = "Create quiz in topic",
                            Name = "Create quiz"
                        },
                        new
                        {
                            Id = 19,
                            Category = "Course",
                            Code = "UpdateQuiz",
                            Description = "Update quiz in topic",
                            Name = "Update quiz"
                        },
                        new
                        {
                            Id = 20,
                            Category = "Course",
                            Code = "DeleteQuiz",
                            Description = "Delete quiz in topic",
                            Name = "Delete quiz"
                        },
                        new
                        {
                            Id = 21,
                            Category = "Course",
                            Code = "AttemptAndReattemptQuiz",
                            Description = "Attempt and Re-attempt quiz",
                            Name = "Attempt and Re-attempt quiz"
                        },
                        new
                        {
                            Id = 22,
                            Category = "Course",
                            Code = "ReviewYourOwnAttempts",
                            Description = "Review your own attempts",
                            Name = "Review your own attempts"
                        },
                        new
                        {
                            Id = 23,
                            Category = "Course",
                            Code = "PreviewQuiz",
                            Description = "Preview quiz",
                            Name = "Preview quiz"
                        },
                        new
                        {
                            Id = 24,
                            Category = "Course",
                            Code = "AddSurveyFromTemplate",
                            Description = "Add survey from template",
                            Name = "Add survey"
                        },
                        new
                        {
                            Id = 25,
                            Category = "Course",
                            Code = "UpdateSurvey",
                            Description = "Update survey",
                            Name = "Update survey"
                        },
                        new
                        {
                            Id = 26,
                            Category = "Course",
                            Code = "DeleteSurvey",
                            Description = "Delete survey",
                            Name = "Delete survey"
                        },
                        new
                        {
                            Id = 27,
                            Category = "Course",
                            Code = "DoAndEditSurvey",
                            Description = "Do and edit survey",
                            Name = "Do and edit survey"
                        },
                        new
                        {
                            Id = 28,
                            Category = "Course",
                            Code = "PreviewSurvey",
                            Description = "Preview survey",
                            Name = "Preview survey"
                        },
                        new
                        {
                            Id = 29,
                            Category = "SurveyTemplate",
                            Code = "ViewSurveyTemplatesList",
                            Description = "View list of survey templates",
                            Name = "View list of survey templates"
                        },
                        new
                        {
                            Id = 30,
                            Category = "SurveyTemplate",
                            Code = "CreateSurveyTemplate",
                            Description = "Create a new survey template",
                            Name = "Create a new survey template"
                        },
                        new
                        {
                            Id = 31,
                            Category = "SurveyTemplate",
                            Code = "UpdateSurveyTemplate",
                            Description = "Update the survey template",
                            Name = "Update the survey template"
                        },
                        new
                        {
                            Id = 32,
                            Category = "SurveyTemplate",
                            Code = "DeleteSurveyTemplate",
                            Description = "Delete the survey template",
                            Name = "Delete the survey template"
                        },
                        new
                        {
                            Id = 33,
                            Category = "QuestionBank",
                            Code = "CreateQuestionBank",
                            Description = "Create question bank",
                            Name = "Create question bank"
                        },
                        new
                        {
                            Id = 34,
                            Category = "QuestionBank",
                            Code = "UpdateQuestionBank",
                            Description = "Update question bank",
                            Name = "Update question bank"
                        },
                        new
                        {
                            Id = 35,
                            Category = "QuestionBank",
                            Code = "DeleteQuestionBank",
                            Description = "Delete question bank",
                            Name = "Delete question bank"
                        },
                        new
                        {
                            Id = 36,
                            Category = "Question",
                            Code = "ViewQuestionsList",
                            Description = "View list of questions in a question bank",
                            Name = "View list of questions in a question bank"
                        },
                        new
                        {
                            Id = 37,
                            Category = "Question",
                            Code = "ViewDetailOfQuestion",
                            Description = "View detail of a question",
                            Name = "View detail of a question"
                        },
                        new
                        {
                            Id = 38,
                            Category = "Question",
                            Code = "CreateQuestion",
                            Description = "Create question",
                            Name = "Create question"
                        },
                        new
                        {
                            Id = 39,
                            Category = "Question",
                            Code = "UpdateQuestion",
                            Description = "Update question",
                            Name = "Update question"
                        },
                        new
                        {
                            Id = 40,
                            Category = "Question",
                            Code = "DeleteQuestion",
                            Description = "Delete question",
                            Name = "Delete question"
                        },
                        new
                        {
                            Id = 41,
                            Category = "Subject",
                            Code = "ViewSubjectsList",
                            Description = "View list of subjects",
                            Name = "View list of subjects"
                        },
                        new
                        {
                            Id = 42,
                            Category = "Subject",
                            Code = "ViewAssignedSubjectsList",
                            Description = "View list of assigned subjects",
                            Name = "View list of assigned subjects"
                        },
                        new
                        {
                            Id = 43,
                            Category = "Subject",
                            Code = "ViewDetailOfSubject",
                            Description = "View detail of subject",
                            Name = "View detail of subject"
                        },
                        new
                        {
                            Id = 44,
                            Category = "Subject",
                            Code = "ViewLearningResourcesList",
                            Description = "View list of learning resources in a subject",
                            Name = "View list of learning resources in a subject"
                        },
                        new
                        {
                            Id = 45,
                            Category = "Subject",
                            Code = "AddLearningResource",
                            Description = "Add a new learning resource",
                            Name = "Add a new learning resource"
                        },
                        new
                        {
                            Id = 46,
                            Category = "Subject",
                            Code = "DeleteLearningResource",
                            Description = "Delete the learning resource",
                            Name = "Delete the learning resource"
                        },
                        new
                        {
                            Id = 47,
                            Category = "Role",
                            Code = "ViewRolesList",
                            Description = "View list of roles",
                            Name = "View list of roles"
                        },
                        new
                        {
                            Id = 48,
                            Category = "Role",
                            Code = "ViewDetailOfRole",
                            Description = "View detail of role",
                            Name = "View detail of role"
                        },
                        new
                        {
                            Id = 49,
                            Category = "Role",
                            Code = "CreateRole",
                            Description = "Create role",
                            Name = "Create role"
                        },
                        new
                        {
                            Id = 50,
                            Category = "Role",
                            Code = "UpdateRole",
                            Description = "Update role",
                            Name = "Update role"
                        },
                        new
                        {
                            Id = 51,
                            Category = "Role",
                            Code = "DeleteRole",
                            Description = "Delete role",
                            Name = "Delete role"
                        },
                        new
                        {
                            Id = 52,
                            Category = "Account",
                            Code = "ViewUsersList",
                            Description = "View list of users",
                            Name = "View list of users"
                        },
                        new
                        {
                            Id = 53,
                            Category = "Account",
                            Code = "ViewDetailOfUser",
                            Description = "View detail of user",
                            Name = "View detail of user"
                        },
                        new
                        {
                            Id = 54,
                            Category = "Account",
                            Code = "AssignRoleToUser",
                            Description = "Assign role to user",
                            Name = "Assign role to user"
                        });
                });

            modelBuilder.Entity("LMS.Data.Entity.PermissionRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_permission_role");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_permission_role_permission_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_permission_role_role_id");

                    b.ToTable("permission_role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            PermissionId = 47,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            PermissionId = 48,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            PermissionId = 49,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            PermissionId = 50,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            PermissionId = 51,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            PermissionId = 52,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            PermissionId = 53,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            PermissionId = 54,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 11,
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 12,
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 13,
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 14,
                            PermissionId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 15,
                            PermissionId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 16,
                            PermissionId = 21,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 17,
                            PermissionId = 22,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 18,
                            PermissionId = 27,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("LMS.Data.Entity.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("create_by");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uuid")
                        .HasColumnName("delete_by");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_time");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int>("QuestionBankId")
                        .HasColumnType("integer")
                        .HasColumnName("question_bank_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("update_by");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("QuestionBankId")
                        .HasDatabaseName("ix_question_question_bank_id");

                    b.ToTable("question");
                });

            modelBuilder.Entity("LMS.Data.Entity.QuestionBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("create_by");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uuid")
                        .HasColumnName("delete_by");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_time");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_questions");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("update_by");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_question_bank");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_question_bank_subject_id");

                    b.ToTable("question_bank");
                });

            modelBuilder.Entity("LMS.Data.Entity.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("create_by");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<int>("Credit")
                        .HasColumnType("integer")
                        .HasColumnName("credit");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uuid")
                        .HasColumnName("delete_by");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_time");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<string>("GradingMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("grading_method");

                    b.Property<bool>("HasStartTime")
                        .HasColumnType("boolean")
                        .HasColumnName("has_start_time");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("NumberOfAllowedAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_allowed_attempts");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_questions");

                    b.Property<float>("PassedScore")
                        .HasColumnType("real")
                        .HasColumnName("passed_score");

                    b.Property<bool>("ShuffledOption")
                        .HasColumnType("boolean")
                        .HasColumnName("shuffled_option");

                    b.Property<bool>("ShuffledQuestion")
                        .HasColumnType("boolean")
                        .HasColumnName("shuffled_question");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<TimeSpan>("TimeLimit")
                        .HasColumnType("interval")
                        .HasColumnName("time_limit");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer")
                        .HasColumnName("topic_id");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("update_by");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_quiz");

                    b.HasIndex("TopicId")
                        .HasDatabaseName("ix_quiz_topic_id");

                    b.ToTable("quiz");
                });

            modelBuilder.Entity("LMS.Data.Entity.QuizAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AnswerHistory")
                        .HasColumnType("json")
                        .HasColumnName("answer_history");

                    b.Property<DateTimeOffset?>("EstimatedFinishTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("estimated_finish_time");

                    b.Property<DateTimeOffset?>("FinishAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finish_at");

                    b.Property<int>("NumberOfCorrectAnswers")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_correct_answers");

                    b.Property<float>("Score")
                        .HasColumnType("real")
                        .HasColumnName("score");

                    b.Property<DateTimeOffset?>("StartAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("UserQuizId")
                        .HasColumnType("integer")
                        .HasColumnName("user_quiz_id");

                    b.HasKey("Id")
                        .HasName("pk_quiz_attempt");

                    b.HasIndex("UserQuizId")
                        .HasDatabaseName("ix_quiz_attempt_user_quiz_id");

                    b.ToTable("quiz_attempt");
                });

            modelBuilder.Entity("LMS.Data.Entity.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<DateTimeOffset>("ExpiresTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_time");

                    b.Property<DateTimeOffset?>("RevokedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_token_user_id");

                    b.ToTable("refresh_token");
                });

            modelBuilder.Entity("LMS.Data.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("create_by");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uuid")
                        .HasColumnName("delete_by");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_time");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasDefaultValueSql("false");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("update_by");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.ToTable("role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateTime = new DateTimeOffset(new DateTime(2022, 6, 20, 18, 42, 42, 701, DateTimeKind.Unspecified).AddTicks(6959), new TimeSpan(0, 7, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateTime = new DateTimeOffset(new DateTime(2022, 6, 20, 18, 42, 42, 704, DateTimeKind.Unspecified).AddTicks(1839), new TimeSpan(0, 7, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("LMS.Data.Entity.RoleUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("create_by");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uuid")
                        .HasColumnName("delete_by");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_time");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("update_by");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_role_user");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_user_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_role_user_user_id");

                    b.ToTable("role_user");
                });

            modelBuilder.Entity("LMS.Data.Entity.SCORM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("create_by");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("PathToFolder")
                        .HasColumnType("text")
                        .HasColumnName("path_to_folder");

                    b.Property<string>("PathToIndex")
                        .HasColumnType("text")
                        .HasColumnName("path_to_index");

                    b.Property<string>("SCORMVersion")
                        .HasColumnType("text")
                        .HasColumnName("scorm_version");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.Property<string>("TitleFromManifest")
                        .HasColumnType("text")
                        .HasColumnName("title_from_manifest");

                    b.Property<string>("TitleFromUpload")
                        .HasColumnType("text")
                        .HasColumnName("title_from_upload");

                    b.HasKey("Id")
                        .HasName("pk_scorm");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_scorm_subject_id");

                    b.ToTable("scorm");
                });

            modelBuilder.Entity("LMS.Data.Entity.Subject", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_subject");

                    b.ToTable("subject");
                });

            modelBuilder.Entity("LMS.Data.Entity.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("create_by");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uuid")
                        .HasColumnName("delete_by");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_time");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<float>("Point")
                        .HasColumnType("real")
                        .HasColumnName("point");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("template_id");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer")
                        .HasColumnName("topic_id");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("update_by");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_survey");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("ix_survey_template_id");

                    b.HasIndex("TopicId")
                        .HasDatabaseName("ix_survey_topic_id");

                    b.ToTable("survey");
                });

            modelBuilder.Entity("LMS.Data.Entity.SurveyOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("Point")
                        .HasColumnType("integer")
                        .HasColumnName("point");

                    b.Property<int>("SurveyQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("survey_question_id");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("update_by");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_survey_option");

                    b.HasIndex("SurveyQuestionId")
                        .HasDatabaseName("ix_survey_option_survey_question_id");

                    b.ToTable("survey_option");
                });

            modelBuilder.Entity("LMS.Data.Entity.SurveyQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BelongTopic")
                        .HasColumnType("text")
                        .HasColumnName("belong_topic");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("create_by");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uuid")
                        .HasColumnName("delete_by");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_time");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer")
                        .HasColumnName("survey_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("update_by");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_survey_question");

                    b.HasIndex("SurveyId")
                        .HasDatabaseName("ix_survey_question_survey_id");

                    b.ToTable("survey_question");
                });

            modelBuilder.Entity("LMS.Data.Entity.SyncLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(0)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer")
                        .HasColumnName("status_code");

                    b.Property<string>("TableName")
                        .HasColumnType("text")
                        .HasColumnName("table_name");

                    b.HasKey("Id")
                        .HasName("pk_sync_log");

                    b.ToTable("sync_log");
                });

            modelBuilder.Entity("LMS.Data.Entity.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("create_by");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uuid")
                        .HasColumnName("delete_by");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_time");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("update_by");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_template");

                    b.ToTable("template");
                });

            modelBuilder.Entity("LMS.Data.Entity.TemplateOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("create_by");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<int>("Point")
                        .HasColumnType("integer")
                        .HasColumnName("point");

                    b.Property<int>("TemplateQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("template_question_id");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("update_by");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_template_option");

                    b.HasIndex("TemplateQuestionId")
                        .HasDatabaseName("ix_template_option_template_question_id");

                    b.ToTable("template_option");
                });

            modelBuilder.Entity("LMS.Data.Entity.TemplateQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BelongTopic")
                        .HasColumnType("text")
                        .HasColumnName("belong_topic");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("create_by");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uuid")
                        .HasColumnName("delete_by");

                    b.Property<DateTimeOffset?>("DeleteTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delete_time");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("template_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("update_by");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_template_question");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("ix_template_question_template_id");

                    b.ToTable("template_question");
                });

            modelBuilder.Entity("LMS.Data.Entity.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("create_by");

                    b.Property<DateTimeOffset>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(0)");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("update_by");

                    b.Property<DateTimeOffset?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_topic");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_topic_course_id");

                    b.ToTable("topic");
                });

            modelBuilder.Entity("LMS.Data.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<DateTimeOffset?>("DateOfJoin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_join")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(0)");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsMale")
                        .HasColumnType("boolean")
                        .HasColumnName("is_male");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user");
                });

            modelBuilder.Entity("LMS.Data.Entity.UserCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action_type");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTimeOffset?>("DateOfJoin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_join");

                    b.Property<float>("FinalScore")
                        .HasColumnType("real")
                        .HasColumnName("final_score");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_course");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_user_course_course_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_course_user_id");

                    b.ToTable("user_course");
                });

            modelBuilder.Entity("LMS.Data.Entity.UserDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_department");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_user_department_department_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_department_user_id");

                    b.ToTable("user_department");
                });

            modelBuilder.Entity("LMS.Data.Entity.UserQuiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("FinalScore")
                        .HasColumnType("real")
                        .HasColumnName("final_score");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_passed");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer")
                        .HasColumnName("quiz_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_quiz");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("ix_user_quiz_quiz_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_quiz_user_id");

                    b.ToTable("user_quiz");
                });

            modelBuilder.Entity("LMS.Data.Entity.UserSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_subject");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_user_subject_subject_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_subject_user_id");

                    b.ToTable("user_subject");
                });

            modelBuilder.Entity("LMS.Data.Entity.UserSurvey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action_type");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer")
                        .HasColumnName("survey_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_survey");

                    b.HasIndex("SurveyId")
                        .HasDatabaseName("ix_user_survey_survey_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_survey_user_id");

                    b.ToTable("user_survey");
                });

            modelBuilder.Entity("LMS.Data.Entity.Course", b =>
                {
                    b.HasOne("LMS.Data.Entity.Subject", "Subject")
                        .WithMany("Courses")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_course_subject_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("LMS.Data.Entity.Option", b =>
                {
                    b.HasOne("LMS.Data.Entity.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_option_question_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("LMS.Data.Entity.OtherLearningResources", b =>
                {
                    b.HasOne("LMS.Data.Entity.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_other_learning_resources_subject_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("LMS.Data.Entity.PermissionRole", b =>
                {
                    b.HasOne("LMS.Data.Entity.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("fk_permission_role_permission_permission_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Data.Entity.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_permission_role_role_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LMS.Data.Entity.Question", b =>
                {
                    b.HasOne("LMS.Data.Entity.QuestionBank", "QuestionBank")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionBankId")
                        .HasConstraintName("fk_question_question_bank_question_bank_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionBank");
                });

            modelBuilder.Entity("LMS.Data.Entity.QuestionBank", b =>
                {
                    b.HasOne("LMS.Data.Entity.Subject", "Subject")
                        .WithMany("QuestionBanks")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_question_bank_subject_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("LMS.Data.Entity.Quiz", b =>
                {
                    b.HasOne("LMS.Data.Entity.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .HasConstraintName("fk_quiz_topic_topic_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("LMS.Data.Entity.QuizAttempt", b =>
                {
                    b.HasOne("LMS.Data.Entity.UserQuiz", "UserQuiz")
                        .WithMany()
                        .HasForeignKey("UserQuizId")
                        .HasConstraintName("fk_quiz_attempt_user_quiz_user_quiz_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserQuiz");
                });

            modelBuilder.Entity("LMS.Data.Entity.RefreshToken", b =>
                {
                    b.HasOne("LMS.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_refresh_token_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.Data.Entity.RoleUser", b =>
                {
                    b.HasOne("LMS.Data.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_user_role_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Data.Entity.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_role_user_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.Data.Entity.SCORM", b =>
                {
                    b.HasOne("LMS.Data.Entity.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_scorm_subject_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("LMS.Data.Entity.Survey", b =>
                {
                    b.HasOne("LMS.Data.Entity.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("fk_survey_template_template_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Data.Entity.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .HasConstraintName("fk_survey_topic_topic_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("LMS.Data.Entity.SurveyOption", b =>
                {
                    b.HasOne("LMS.Data.Entity.SurveyQuestion", "SurveyQuestion")
                        .WithMany()
                        .HasForeignKey("SurveyQuestionId")
                        .HasConstraintName("fk_survey_option_survey_question_survey_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("LMS.Data.Entity.SurveyQuestion", b =>
                {
                    b.HasOne("LMS.Data.Entity.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .HasConstraintName("fk_survey_question_survey_survey_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("LMS.Data.Entity.TemplateOption", b =>
                {
                    b.HasOne("LMS.Data.Entity.TemplateQuestion", "TemplateQuestion")
                        .WithMany()
                        .HasForeignKey("TemplateQuestionId")
                        .HasConstraintName("fk_template_option_template_question_template_question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemplateQuestion");
                });

            modelBuilder.Entity("LMS.Data.Entity.TemplateQuestion", b =>
                {
                    b.HasOne("LMS.Data.Entity.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("fk_template_question_template_template_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("LMS.Data.Entity.Topic", b =>
                {
                    b.HasOne("LMS.Data.Entity.Course", "Course")
                        .WithMany("Topics")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("fk_topic_course_course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LMS.Data.Entity.UserCourse", b =>
                {
                    b.HasOne("LMS.Data.Entity.Course", "Course")
                        .WithMany("Users")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("fk_user_course_course_course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_course_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.Data.Entity.UserDepartment", b =>
                {
                    b.HasOne("LMS.Data.Entity.Department", "Department")
                        .WithMany("UserDepartments")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_user_department_department_department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Data.Entity.User", "User")
                        .WithMany("Departments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_department_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.Data.Entity.UserQuiz", b =>
                {
                    b.HasOne("LMS.Data.Entity.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .HasConstraintName("fk_user_quiz_quiz_quiz_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_quiz_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.Data.Entity.UserSubject", b =>
                {
                    b.HasOne("LMS.Data.Entity.Subject", "Subject")
                        .WithMany("Users")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_user_subject_subject_subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Data.Entity.User", "User")
                        .WithMany("Subjects")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_subject_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.Data.Entity.UserSurvey", b =>
                {
                    b.HasOne("LMS.Data.Entity.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .HasConstraintName("fk_user_survey_survey_survey_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Data.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_survey_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.Data.Entity.Course", b =>
                {
                    b.Navigation("Topics");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LMS.Data.Entity.Department", b =>
                {
                    b.Navigation("UserDepartments");
                });

            modelBuilder.Entity("LMS.Data.Entity.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("LMS.Data.Entity.QuestionBank", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("LMS.Data.Entity.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LMS.Data.Entity.Subject", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("QuestionBanks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LMS.Data.Entity.User", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Roles");

                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
